{
	"compiler": {
		"version": "0.8.27+commit.40a35a09"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityMinted",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "LiquidityAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "LiquidityRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "swapper",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenIn",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOut",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "TokensSwapped",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountADesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBDesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveOut",
						"type": "uint256"
					}
				],
				"name": "getAmountOut",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForTokens",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"events": {
				"LiquidityAdded(address,address,address,uint256,uint256,uint256,uint256)": {
					"params": {
						"amountA": "The amount of tokenA added",
						"amountB": "The amount of tokenB added",
						"liquidityMinted": "The amount of liquidity tokens minted to the provider",
						"provider": "The address adding liquidity",
						"timestamp": "The timestamp when liquidity was added",
						"tokenA": "The first token in the pool",
						"tokenB": "The second token in the pool"
					}
				},
				"LiquidityRemoved(address,uint256,uint256)": {
					"params": {
						"amountA": "The amount of tokenA withdrawn",
						"amountB": "The amount of tokenB withdrawn",
						"provider": "The address removing liquidity"
					}
				},
				"TokensSwapped(address,address,address,uint256,uint256,uint256)": {
					"params": {
						"amountIn": "The amount of tokenIn sent",
						"amountOut": "The amount of tokenOut received",
						"swapper": "The address performing the swap",
						"timestamp": "The timestamp when the swap occurred",
						"tokenIn": "The token address sent to the contract",
						"tokenOut": "The token address received from the contract"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"params": {
						"amountADesired": "Max amount of tokenA to add",
						"amountAMin": "Min acceptable amount of tokenA (slippage protection)",
						"amountBDesired": "Max amount of tokenB to add",
						"amountBMin": "Min acceptable amount of tokenB (slippage protection)",
						"deadline": "Timestamp after which transaction is invalid",
						"to": "Address to receive liquidity tokens (LP tokens)",
						"tokenA": "Address of the first token",
						"tokenB": "Address of the second token"
					},
					"returns": {
						"amountA": "Actual amount of tokenA added",
						"amountB": "Actual amount of tokenB added",
						"liquidity": "Amount of liquidity tokens minted"
					}
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"params": {
						"amountIn": "Amount of input token being swapped",
						"reserveIn": "Reserve of input token in pool",
						"reserveOut": "Reserve of output token in pool"
					},
					"returns": {
						"amountOut": "The calculated output amount of token"
					}
				},
				"getPrice(address,address)": {
					"params": {
						"tokenA": "The first token address",
						"tokenB": "The second token address"
					},
					"returns": {
						"price": "The price of one unit of tokenA in tokenB, scaled by 1e18"
					}
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"params": {
						"amountAMin": "Minimum amount of tokenA to receive (slippage protection)",
						"amountBMin": "Minimum amount of tokenB to receive (slippage protection)",
						"deadline": "Timestamp after which transaction is invalid",
						"liquidity": "Amount of liquidity tokens to burn",
						"to": "Address to receive withdrawn tokens",
						"tokenA": "Address of the first token",
						"tokenB": "Address of the second token"
					},
					"returns": {
						"amountA": "Amount of tokenA withdrawn",
						"amountB": "Amount of tokenB withdrawn"
					}
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"params": {
						"amountIn": "Exact amount of input tokens to swap",
						"amountOutMin": "Minimum acceptable amount of output tokens (slippage protection)",
						"deadline": "Timestamp after which transaction is invalid",
						"path": "Array of token addresses [tokenIn, tokenOut]",
						"to": "Address to receive output tokens"
					},
					"returns": {
						"amounts": "Array with amounts [amountIn, amountOut]"
					}
				}
			},
			"stateVariables": {
				"pools": {
					"details": "Mapping from pair hash to Pool struct"
				}
			},
			"title": "SimpleSwap - A basic ERC20 token swap and liquidity pool contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"LiquidityAdded(address,address,address,uint256,uint256,uint256,uint256)": {
					"notice": "Emitted when liquidity is added to a pool"
				},
				"LiquidityRemoved(address,uint256,uint256)": {
					"notice": "Emitted when liquidity is removed from a pool"
				},
				"TokensSwapped(address,address,address,uint256,uint256,uint256)": {
					"notice": "Emitted when tokens are swapped"
				}
			},
			"kind": "user",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"notice": "Adds liquidity to a token pair pool"
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"notice": "Calculates the output token amount given an input amount and reserves using Uniswap's formula with 0.3% fee"
				},
				"getPrice(address,address)": {
					"notice": "Returns the price of tokenA in terms of tokenB (scaled by 1e18)"
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"notice": "Removes liquidity from a token pair pool"
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"notice": "Swaps an exact amount of input tokens for as many output tokens as possible (1 hop only)"
				}
			},
			"notice": "Enables users to add/remove liquidity and swap tokens in a two-token pool",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"z-MODULO3_TP3/SimpleSwap.sol": "SimpleSwap"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
				"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"z-MODULO3_TP3/SimpleSwap.sol": {
			"keccak256": "0xa436bcf34293d31230d037964fc0609189b9f4f341f226cc6af791b8487a7aa2",
			"license": "MIT",
			"urls": [
				"bzz-raw://b677327138299fe1ca8ada11779b3a7108ad4bfd9fc6b4c868bfa12fcc812f85",
				"dweb:/ipfs/QmWMy5ynKTtKPFAFuQrGbRCMpMsNLBDhsrkwotBxytj6ZR"
			]
		}
	},
	"version": 1
}